'use strict';

// VARIABLES GLOBALES
var colores = ['#0075C9', '#009DDA', '#00B5E4'];

//  Funciones
// const formatoNumero = (d) => {
//   let format = d3.format(',.0f');
//
//   return `${ format(d) } Twh`;
// };

/* Resta el porcentaje indicado a un color (RR, GG o BB) hexadecimal para oscurecerlo */
var subtractLight = function subtractLight(color, amount) {
  var cc = parseInt(color, 16) - amount;
  var c = cc < 0 ? 0 : cc;
  c = c.toString(16).length > 1 ? c.toString(16) : '0' + c.toString(16);

  return c;
};

/* Oscurece un color hexadecimal de 6 caracteres #RRGGBB segun el porcentaje indicado */
var darken = function darken(color, amount) {
  color = color.indexOf('#') >= 0 ? color.substring(1, color.length) : color;
  amount = parseInt(255 * amount / 100);
  color = '#' + subtractLight(color.substring(0, 2), amount) + subtractLight(color.substring(2, 4), amount) + subtractLight(color.substring(4, 6), amount);

  return color;
};

$(function () {

  var height = $('#sankey').height(),
      width = $('#sankey').width(),

  // clavesNodos = [],
  // dataSankey  = {},
  // moveId = 0,
  nodesOri = void 0,
      linksOri = void 0,
      nodesGlo = void 0,
      linksGlo = void 0,
      sankeyChartD3 = void 0,
      path = void 0,
      svg = void 0;

  //  Funciones
  // const generarPuertas    = () => {
  //   dataSankey.nodes.filter((element) => (element.parent === false)).forEach((v, k) => {
  //     clavesNodos.push({ 'id': v.id, 'state': true });
  //   });
  // };
  var createGrafico = function createGrafico(data, container) {
    // Variables
    var margin = { top: 0, right: 0, bottom: 0, left: 0 };
    var size = { width: 300 - margin.left - margin.right, height: 50 - margin.top - margin.bottom };
    var years = ['2012', '2013', '2014', '2015', '2016', '2017'];
    var newData = [];

    data.forEach(function (v, k) {
      newData.push({ date: new Date(years[k]), value: v });
    });

    var svgGrafico = container.html('').append('svg').attr('width', size.width + margin.left + margin.right).attr('height', size.height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')');

    // let parseTime = d3.timeParse('%d-%b-%y');

    var x = d3.scaleTime().domain(d3.extent(newData, function (d) {
      return d.date;
    })).rangeRound([0, size.width]);
    var y = d3.scaleLinear().domain(d3.extent(newData, function (d) {
      return d.value;
    })).rangeRound([size.height, 0]);

    var line = d3.line().x(function (d) {
      return x(d.date);
    }).y(function (d) {
      return y(d.value);
    });

    svgGrafico.append('g').call(d3.axisBottom(x)).style('transform', 'translate(0px, ' + (size.height - 1) + 'px)');

    svgGrafico.append('g').call(d3.axisLeft(y));
    // .append('text')
    //   .attr('fill', '#000')
    //   .attr('transform', 'rotate(-90)')
    //   .attr('y', 6)
    //   .attr('dy', '0.71em')
    //   .attr('text-anchor', 'end')
    //   .text('Price ($)');

    svgGrafico.append('path').datum(newData).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-linejoin', 'round').attr('stroke-linecap', 'round').attr('stroke-width', 1.5).attr('d', line);
  };

  var fadeIn = function fadeIn() {
    var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    return function (g, i) {
      var all_links = d3.selectAll('#sankey .link'),
          all_nodes = d3.selectAll('#sankey .node'),
          nodes_id = [],
          element_id = id === null ? g.id : id;

      console.log(element_id);

      var event_node = all_nodes.filter(function (d) {
        return d.id === element_id;
      });
      event_node.select('rect').transition().style('fill', 'black').style('stroke', 'black');
      event_node.select('text').transition().style('fill', 'black');

      var filter_nodes = all_nodes.filter(function (d) {
        var state = false;

        nodes_id.forEach(function (element) {
          if (d.id === element) {
            state = true;
          }
        });

        return state;
      });
      filter_nodes.select('rect').transition().style('fill', 'black').style('stroke', 'black');
      filter_nodes.select('text').transition().style('fill', 'black');

      var filter_links = all_links.filter(function (d) {
        var state = true;

        if (d.source.id === element_id) {
          nodes_id.push(d.target.id);
        } else if (d.target.id === element_id) {
          nodes_id.push(d.source.id);
        } else {
          state = false;
        }

        return state;
      });
      filter_links.transition().style('stroke', '#0075C9').style('stroke-opacity', 0.5);
    };
  };
  var tooltipIn = function tooltipIn(d) {
    $('#tooltip').css({ top: event.layerY + 20, left: event.layerX + 20 });
    $('.tooltip_name').text(d.name);
    $('.tooltip_production').text('Producci\xF3n: ' + d.production);
    $('.tooltip_losses').text('P\xE9rdida: ' + d.losses);
  };
  var fadeOut = function fadeOut(opacity) {
    return function (g, i) {
      var all_links = d3.selectAll('#sankey .link'),
          all_nodes = d3.selectAll('#sankey .node'),
          nodes_id = [];

      var event_node = all_nodes.filter(function (d) {
        return d.id === g.id;
      });
      event_node.select('rect').transition().style('fill', null).style('stroke', null);
      event_node.select('text').transition().style('fill', null);

      var filter_nodes = all_nodes.filter(function (d) {
        var state = false;

        nodes_id.forEach(function (element) {
          if (d.id === element) {
            state = true;
          }
        });

        return state;
      });
      filter_nodes.select('rect').transition().style('fill', null).style('stroke', null);
      filter_nodes.select('text').transition().style('fill', null);

      var filter_links = all_links.filter(function (d) {
        var state = true;

        if (d.source.id === g.id) {
          nodes_id.push(d.target.id);
        } else if (d.target.id === g.id) {
          nodes_id.push(d.source.id);
        } else {
          state = false;
        }

        return state;
      });
      filter_links.transition().style('stroke', null).style('stroke-opacity', null);

      $('#tooltip').removeAttr('style');
    };
  };

  var intro = function intro() {
    fadeIn(2)();
    fadeIn(27)();
    fadeIn(13)();
    fadeIn(26)();
    fadeIn(12)();
    fadeIn(31)();
  };
  // const colapsarExpandirNodo = (nodo) => {
  //
  //   nodesOri[nodo.id].group = (nodesOri[nodo.id].group) ? (false) : (true);
  //
  //   return nodesOri;
  //
  //
  //   // let oldLinks = dataSankey.links;
  //
  //   // if (nodo.parent === false) {
  //   //   console.log('Se expande nodo');
  //   //   clavesNodos.forEach((element) => { if (element.id === nodo.id + moveId) { element.state = false; } });
  //   //
  //   //   dataSankey.nodes = nodosOriginales;
  //   //   dataSankey.links = linksOriginales;
  //   //
  //   //   dataSankey.links = declareGroupLinks(dataSankey.links, true);
  //   //
  //   //   dataSankey = buscarNodes(dataSankey.nodes, dataSankey.links);
  //   //   moveId = 0;
  //   //   $('#sankey').empty();
  //   //   dibujarSankey(width, height, dataSankey);
  //   //   // actualizarSankey($('#content').width(), $('#content').height(), dataSankey, oldLinks);
  //   // } else {
  //   //   console.log('Se colapsa nodo');
  //   //   // let parent = dataSankey.nodes.filter((element) => (element.name === nodo.parent))[0];
  //   //   // clavesNodos.filter((element) => (element.id === parent.id))[0].state = true;
  //   //   //
  //   //   // dataSankey = buscarNodes(nodosOriginales, dataSankey.links = declareGroupLinks(linksOriginales));
  //   //   //
  //   //   // $('#sankey').empty();
  //   //   // dibujarSankey(width, height, dataSankey);
  //   //   // actualizarSankey($('#content').width(), $('#content').height(), dataSankey, oldLinks);
  //   // }
  // };

  var dibujarSankey = function dibujarSankey(width, heigth, data) {

    // Se vacia contenedor
    $('#sankey').empty();

    // Se definen variables
    var margin = {
      top: 40,
      right: 200,
      bottom: 40,
      left: 200,
      header: 20
    },
        headerSize = 19,
        size = {
      width: (width < 1400 ? width : 1400) - margin.left - margin.right,
      height: heigth - margin.top - margin.bottom - margin.header - headerSize
    },
        secciones = ['COL 01', 'COL 02', 'COL 03', 'COL 04', 'COL 05', 'COL 06'],
        anchoNodo = 20,
        separacionNodo = 20,
        posColumnas = [];

    // CreaciÃ³n SVG
    svg = d3.select('#sankey').append('svg').attr('width', size.width + margin.right + margin.left).attr('height', size.height + margin.top + margin.bottom + margin.header + headerSize);

    // Borrar
    // svg.append('g')
    //   .attr('transform', `translate(${ 0 }, ${ 0 })`)
    //   .append('rect')
    //   .attr('width', `${ size.width + margin.right + margin.left }px`)
    //   .attr('height', `${ margin.top }px`)
    //   .style('fill', 'silver');
    // Borrar
    // svg.append('g')
    //   .attr('transform', `translate(${ 0 }, ${ height - margin.bottom })`)
    //   .append('rect')
    //   .attr('width', `${ size.width + margin.right + margin.left }px`)
    //   .attr('height', `${ margin.top }px`)
    //   .style('fill', 'silver');
    // Borrar
    // svg.append('g')
    //   .attr('transform', `translate(${ 0 }, ${ margin.top + headerSize })`)
    //   .append('rect')
    //   .attr('width', `${ size.width + margin.right + margin.left }px`)
    //   .attr('height', `${ margin.header }px`)
    //   .style('fill', 'silver');

    // Se agregan encabezados
    var encabezado = svg.append('g').attr('id', 'chart-encabezado').attr('transform', 'translate(' + margin.left + ', ' + (margin.top + 15) + ')');
    encabezado.append('text').attr('class', 'chart-encabezado-left').attr('x', -10).text(secciones[0]);

    // Se crea grafico
    var chart = svg.append('g').attr('transform', 'translate(' + margin.left + ', ' + (margin.top + $('#chart-encabezado')[0].getBBox().height + margin.header) + ')');

    // CreaciÃ³n Sankey
    sankeyChartD3 = d3.sankey().nodeWidth(anchoNodo).nodePadding(separacionNodo).size([size.width, size.height]).nodes(data.nodes).links(data.links).layout();

    // CreaciÃ³n de Links
    path = sankeyChartD3.link();

    //  Se crean links
    var link = chart.append('g').attr('id', 'links').selectAll('.link').data(data.links).enter().append('path').attr('d', path).attr('class', 'link').style('stroke-width', function (d) {
      return Math.max(1, d.dy);
    })
    // .on('mouseover', (d) => { d3.select(d3.event.target).style('stroke-opacity', 1); })
    // .on('mouseout', (d) => { d3.select(d3.event.target).style('stroke-opacity', 0.75); })
    .sort(function (a, b) {
      return b.dy - a.dy;
    });

    // link.filter((element) => (element.target.name === 'EXPORTACIONES' || element.target.name === 'CONSUMO PROPIO' || element.target.name === 'TRANSPORTE' || element.target.name === 'PERDIDA'))
    //   .style('stroke', '#BA3F1D');

    // Se crean nodos
    var node = chart.append('g').attr('id', 'nodes').selectAll('.node').data(data.nodes).enter().append('g').attr('id', function (d) {
      return d.id;
    }).attr('class', 'node').attr('transform', function (d) {

      if (posColumnas.indexOf(d.x) === -1) {
        posColumnas.push(d.x);
      }

      return 'translate(' + d.x + ', ' + d.y + ')';
    }); // error compatibilidad
    // .call(d3.drag().on('drag', dragmove));

    // Se crean rectangulos nodos
    node.append('rect').attr('width', sankeyChartD3.nodeWidth()).attr('height', function (d) {
      return Math.max(5, d.dy);
    }).on('mouseover', fadeIn()).on('mouseout', fadeOut()).on('mousemove', tooltipIn);

    // Se crean textos nodos
    node.append('text').attr('class', 'node-text').attr('x', 10 + sankeyChartD3.nodeWidth()).attr('y', function (d) {
      return d.dy / 2;
    }).attr('dy', '0.35em').text(function (d) {
      return d.name;
    }).filter(function (d) {
      return d.targetLinks.length === 0;
    }).attr('class', 'node-text-start').attr('x', -10);

    // Se agrega texto referencia hover link
    // link.append('title').text((d) => `${ d.source.name } (${ d.source.id }) â ${ d.target.name } (${ d.target.id }) â ${ d.value }`);

    // Se agrega texto referencia hover node
    // node.append('title').text((d) => `${ d.name } (${ d.id })`);

    // Se agregan encabezados
    posColumnas.sort(); // Se ordena posicion de columnas
    secciones.forEach(function (v, k) {
      encabezado.append('text').filter(function (d) {
        return k > 0;
      }).attr('class', 'chart-encabezado-right').attr('x', function (d) {
        return posColumnas[k] + anchoNodo + 10;
      }).text(v);
    });

    // the function for moving the nodes
    // function dragmove(d) {
    //   d3.select(this).attr('transform', `translate(${ d.x = Math.max(0, Math.min(size.width - d.dx, d3.event.x)) }, ${ d.y = Math.max(0, Math.min(size.height - d.dy, d3.event.y)) })`);
    //   sankeyChartD3.relayout();
    //   link.attr('d', path);
    // }
  };

  // const actualizarSankey = (width, heigth, data, oldLinks) => {
  //   const linksDiff = (links_old, links_new) => {
  //     console.log(links_old);
  //     console.log(links_new);
  //     let links = [],
  //         source,
  //         target;
  //
  //     links_new.forEach((v, k) => {
  //       source  = v.source;
  //       target  = v.target;
  //
  //       links_old.forEach((v, k) => { if ((source !== v.source.id) || (target !== v.target.id)) { links.push(v); } });
  //     });
  //
  //     return links;
  //   };
  //
  //   // let newNodes = nodesDiff(data, sankeyData);
  //   // let newLinks = linksDiff(oldLinks, data.links);
  //
  //   // Parametros
  //   let margin = {
  //     top: 0,
  //     right: 0,
  //     bottom: 0,
  //     left: 0
  //   };
  //   let size = {
  //     width: width - margin.left - margin.right,
  //     height: heigth - margin.top - margin.bottom
  //   };
  //
  //   // CreaciÃ³n Sankey
  //   sankeyChartD3 = d3.sankey()
  //     .nodeWidth(20) // Ancho nodo
  //     .size([size.width, size.height])
  //     .nodes(data.nodes)
  //     .links(data.links)
  //     .layout(32);
  //
  //   sankeyChartD3.relayout();
  //
  //   // CreaciÃ³n de Links
  //   path = sankeyChartD3.link();
  //   $('#links').empty();
  //
  //   let links = d3.select('#links')
  //     .selectAll('.link')
  //     .data(data.links)
  //     .enter();
  //
  //   links.append('path')
  //       .attr('class', 'link')
  //       .attr('d', (d) => path(d))
  //       .style('stroke-width', (d) => {
  //         return d.dy;
  //       })
  //       .style('stroke', 'gray')
  //       .on('mouseover', (d) => {
  //         // console.log(d3.event);
  //         d3.select(d3.event.target).style('stroke', 'red');
  //       })
  //       .on('mouseout', (d) => {
  //         d3.select(d3.event.target).style('stroke', 'gray');
  //       });
  //
  //   // d3.selectAll('.link')
  //   //   .data(data.links)
  //   //   .attr('d', (d) => path(d));
  //   d3.selectAll('.node')
  //     .data(data.nodes)
  //     // .transition()
  //     .attr('transform', (d) => `translate(${ d.x }, ${ d.y })`);
  //   d3.selectAll('rect')
  //     .data(data.nodes)
  //     .style('opacity', 0)
  //     .attr('width', sankeyChartD3.nodeWidth())
  //     .attr('height', (d) => d.dy)
  //     .transition()
  //     .style('opacity', 1);
  //
  //   // Create Diference
  //   // newLinks.forEach((v, k) => {
  //   //   let link = d3.select('#links')
  //   //     .append('path')
  //   //       .attr('class', 'link')
  //   //       .attr('d', () => path(v))
  //   //       .style('stroke-width', () => Math.max(1, v.dy))
  //   //       .style('stroke', () => scaleColor(v.source.name.replace(' ', '')))
  //   //       .sort((a, b) => (b.dy - a.dy));
  //   //
  //   //   link.append('title').text(() => `${ v.source.name } â ${ v.target.name } \n ${ formatoNumero(v.value) }`);
  //   // });
  // };
  // const maxParent = (nodo) => {
  //   // console.log(nodo);
  //   let parentNode = nodesGlo.filter((element) => (element.id === nodo.parent))[0];
  //
  //   if (nodo.parent !== false) {
  //     if (typeof(parentNode) !== 'undefined' && parentNode.group === true) {
  //       return maxParent(nodesGlo.filter((element) => (element.id === nodo.parent))[0]);
  //     } else {
  //       return nodo;
  //     }
  //   } else {
  //     return nodo;
  //   }
  // };
  // const deleteEmptyNodes = () => {
  //   let del = 0,
  //       nodesDelete = [],
  //       status;
  //
  //   // moveId = 0;
  //
  //   nodesGlo.forEach((node, nodeI) => {
  //
  //     // console.log('nodo: ' + nodeI + ' ( id: ' + node.id + ')');
  //     status = false;
  //
  //     // Consulto si el nodo se utiliza en algun link
  //     linksGlo.forEach((link, linkI) => {
  //       if (node.id === link.source) {
  //         status = true;
  //         link.source = link.source - del;
  //       }
  //       if (node.id === link.target) {
  //         status = true;
  //         link.target = link.target - del;
  //       }
  //     });
  //
  //     // // Modificar el ID restando la cantidad de elementos borrados
  //     // node.id = node.id - del;
  //
  //     if (!status) {
  //       // console.log('Borrar');
  //       nodesDelete.push(nodeI);
  //       del++;
  //     }
  //     // else {
  //     //   // console.log('nodo: ' + nodeI + ' ( id: ' + node.id + ')<-');
  //     // }
  //   });
  //
  //   nodesDelete.reverse().forEach((node) => { nodesGlo.splice(node, 1); });
  //
  //   // moveId = del;
  //   // nodes.forEach((node, nodeI) => {
  //   //   console.log('nodo: ' + nodeI + ' ( id: ' + node.id + ')');
  //   // });
  //
  //   // console.log(links);
  //   return nodesGlo;
  // };
  // const declareGroupLinks = () => {
  //   let links = [],
  //       source, parentSource, stateSource,
  //       target, parentTarget, stateTarget,
  //       nodoExistente,
  //       addSource,
  //       addTarget,
  //       addValue;
  //
  //   linksGlo.forEach((v, k) => {
  //
  //     //Se obtiene source y target del elemento
  //     source = nodesGlo.filter((element) => (element.id === parseInt(v.source)))[0];
  //     target = nodesGlo.filter((element) => (element.id === parseInt(v.target)))[0];
  //     //Se guarda source-padre y target-padre
  //     parentSource = maxParent(source);
  //     parentTarget = maxParent(target);
  //     //Se guarda source-state y target-state
  //     stateSource = parentSource.group;
  //     stateTarget = parentTarget.group;
  //     //Se guarda source y link a crear
  //     addSource = (stateSource) ? (parentSource) : (source);
  //     addTarget = (stateTarget) ? (parentTarget) : (target);
  //     addValue  = parseInt(v.value);
  //     //Se consulta si el nodo existe
  //     nodoExistente = links.filter((element) => (element.source === addSource.id && element.target === addTarget.id));
  //
  //     if (nodoExistente.length !== 0) {
  //       //Se suma valor a duplicado
  //       nodoExistente[0].value += addValue;
  //     } else {
  //       //Se creo nuevo link
  //       links.push({
  //         'source': addSource.id,
  //         'target': addTarget.id,
  //         'value':  addValue
  //       });
  //     }
  //   });
  //   return links;
  // };
  // const preSankey = () => {
  //   linksGlo = $.extend(true, [], linksOri);
  //   nodesGlo = $.extend(true, [], nodesOri);
  //   linksGlo = declareGroupLinks();
  //   nodesGlo = deleteEmptyNodes();
  //
  //   dibujarSankey(width, height, { 'nodes': nodesGlo, 'links': linksGlo });
  // };

  var init = function init() {

    var downloadFile = function downloadFile() {
      console.log('Se solicitan archivos'); // Borrar

      var formatoSankey = function formatoSankey(elemento, data) {
        var processData = [];

        switch (elemento) {
          case 'nodos':
            data.forEach(function (v, k) {

              processData.push({
                'id': parseInt(v.id),
                'name': v.name,
                'parent': v.parent === 'null' ? false : parseInt(v.parent),
                'category': v.category,
                'pos': parseInt(v.position),
                'group': v.group === 'true' ? true : false,
                'imp': v.importation.split(';').map(function (element) {
                  return parseInt(element);
                }),
                'exp': v.exportation.split(';').map(function (element) {
                  return parseInt(element);
                }),
                'prod': v.production.split(';').map(function (element) {
                  return parseInt(element);
                })
              });
            });
            break;
          case 'links':
            data.forEach(function (v, k) {
              processData.push({
                'source': parseInt(v.source),
                'target': parseInt(v.target),
                'value': parseInt(v.value)
              });
            });
            break;
        }

        return processData;
      };

      var promise = new Promise(function (success) {
        d3.json('public/src/nodes.json', function (nodos) {
          nodesOri = nodos;

          d3.json('public/src/links.json', function (links) {
            linksOri = links;

            success();
          });
        });

        // d3.csv('public/src/nodes.csv',
        //   (nodos) => {
        //     nodesOri = formatoSankey('nodos', nodos);
        //
        //     d3.csv('public/src/links.csv',
        //       (links) => {
        //         linksOri = formatoSankey('links', links);
        //
        //         success();
        //       }
        //     );
        //   }
        // );
      });

      return promise;
    };

    downloadFile().then(function () {
      dibujarSankey(width, height, { 'nodes': nodesOri, 'links': linksOri });
      intro();
      // preSankey();
    });
  };

  init();
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
