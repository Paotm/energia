{"version":3,"sources":["../src/js/d3-sankeyNew.js"],"names":["d3","sankey","computeNodeBreadths","flatten","a","concat","apply","layerComponents","remainingComponents","components","nextComponents","visitedIndex","x","length","forEach","component","scc","n","sourceLinks","l","hasOwnProperty","target","index","push","bfs","node","extractTargets","queue","currentCount","nextCount","currentNode","shift","dx","nodeWidth","targets","i","root","filter","sourceLink","map","max","componentsByBreadth","nest","key","d","pos","sortKeys","ascending","entries","values","nextMax","c","layer","Math","nodes","link","source","name","scaleNodeBreadths","size","moveSourcesRight","targetLinks","min","moveSinksRight","kx","computeNodeDepths","iterations","initializeNodeDepth","ky","nodesByBreadth","nodePadding","sum","value","y","dy","links","relaxLeftToRight","alpha","weightedSource","center","breadth","relaxRightToLeft","weightedTarget","slice","reverse","resolveCollisions","y0","sort","byValue","ascendingDepth","b","first","second","firstValue","secondValue","computeLinkDepths","ascendingSourceDepth","ascendingTargetDepth","sy","ty","_","arguments","layout","computeNodeLinks","computeNodeValues","computeNodeStructure","relayout","reversibleLink","forwardLink","part","x0","x1","xi","interpolateNumber","x2","curvature","x3","y1","y2","y3","backwardLink","getDir","p","curveExtension","curveDepth","dt","parseInt","fluid","nodeStack","connect","lowIndex","onStack","pop"],"mappings":"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","file":"d3-sankeyNew-min.js","sourcesContent":["d3.sankey = function() {\n  var sankey = {},\n      nodeWidth = 24,\n      nodePadding = 30,\n      size = [1, 1],\n      nodes = [],\n      links = [],\n      components = [];\n\n  sankey.nodeWidth = function(_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function(_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function(_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function(_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  sankey.layout = function(iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n\n    computeNodeStructure();\n    computeNodeBreadths();\n\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n\n    return sankey;\n  };\n\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // A more involved path generator that requires 3 elements to render --\n  // It draws a starting element, intermediate and end element that are useful\n  // while drawing reverse links to get an appropriate fill.\n  //\n  // Each link is now an area and not a basic spline and no longer guarantees\n  // fixed width throughout.\n  //\n  // Sample usage:\n  //\n  //  linkNodes = this._svg.append(\"g\").selectAll(\".link\")\n  //      .data(this.links)\n  //    .enter().append(\"g\")\n  //      .attr(\"fill\", \"none\")\n  //      .attr(\"class\", \".link\")\n  //      .sort(function(a, b) { return b.dy - a.dy; });\n  //\n  //  linkNodePieces = [];\n  //  for (var i = 0; i < 3; i++) {\n  //    linkNodePieces[i] = linkNodes.append(\"path\")\n  //      .attr(\"class\", \".linkPiece\")\n  //      .attr(\"d\", path(i))\n  //      .attr(\"fill\", ...)\n  //  }\n  sankey.reversibleLink = function() {\n    var curvature = 0.5;\n\n    // Used when source is behind target, the first and last paths are simple\n    // lines at the start and end node while the second path is the spline\n    function forwardLink(part, d) {\n      var x0 = d.source.x + d.source.dx,\n          x1 = d.target.x,\n          xi = d3.interpolateNumber(x0, x1),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = d.source.y + d.sy,\n          y1 = d.target.y + d.ty,\n          y2 = d.source.y + d.sy + d.dy,\n          y3 = d.target.y + d.ty + d.dy;\n\n      switch (part) {\n        case 0:\n          return \"M\" + x0 + \",\" + y0 + \"L\" + x0 + \",\" + (y0 + d.dy);\n\n        case 1:\n          return \"M\" + x0 + \",\" + y0\n               + \"C\" + x2 + \",\" + y0 + \" \" + x3 + \",\" + y1 + \" \" + x1 + \",\" + y1\n               + \"L\" + x1 + \",\" + y3\n               + \"C\" + x3 + \",\" + y3 + \" \" + x2 + \",\" + y2 + \" \" + x0 + \",\" + y2\n               + \"Z\";\n\n        case 2:\n          return \"M\" + x1 + \",\" + y1 + \"L\" + x1 + \",\" + (y1 + d.dy);\n      }\n    }\n\n    // Used for self loops and when the source is actually in front of the\n    // target; the first element is a turning path from the source to the\n    // destination, the second element connects the two twists and the last\n    // twists into the target element.\n    //\n    //\n    //  /--Target\n    //  \\----------------------\\\n    //                 Source--/\n    //\n    function backwardLink(part, d) {\n      var curveExtension = 30;\n      var curveDepth = 15;\n\n      function getDir(d) {\n        return d.source.y + d.sy > d.target.y + d.ty ? -1 : 1;\n      }\n\n      function p(x, y) {\n        return x + \",\" + y + \" \";\n      }\n\n      var dt = getDir(d) * curveDepth,\n          x0 = d.source.x + d.source.dx,\n          y0 = d.source.y + d.sy,\n          x1 = d.target.x,\n          y1 = d.target.y + d.ty;\n\n      switch (part) {\n        case 0:\n          return \"M\" + p(x0, y0) +\n                 \"C\" + p(x0, y0) +\n                       p(x0 + curveExtension, y0) +\n                       p(x0 + curveExtension, y0 + dt) +\n                 \"L\" + p(x0 + curveExtension, y0 + dt + d.dy) +\n                 \"C\" + p(x0 + curveExtension, y0 + d.dy) +\n                       p(x0, y0 + d.dy) +\n                       p(x0, y0 + d.dy) +\n                 \"Z\";\n        case 1:\n          return \"M\" + p(x0 + curveExtension, y0 + dt) +\n                 \"C\" + p(x0 + curveExtension, y0 + 3 * dt) +\n                       p(x1 - curveExtension, y1 - 3 * dt) +\n                       p(x1 - curveExtension, y1 - dt) +\n                 \"L\" + p(x1 - curveExtension, y1 - dt + d.dy) +\n                 \"C\" + p(x1 - curveExtension, y1 - 3 * dt + d.dy) +\n                       p(x0 + curveExtension, y0 + 3 * dt + d.dy) +\n                       p(x0 + curveExtension, y0 + dt + d.dy) +\n                 \"Z\";\n\n        case 2:\n          return \"M\" + p(x1 - curveExtension, y1 - dt) +\n                 \"C\" + p(x1 - curveExtension, y1) +\n                       p(x1, y1) +\n                       p(x1, y1) +\n                 \"L\" + p(x1, y1 + d.dy) +\n                 \"C\" + p(x1, y1 + d.dy) +\n                       p(x1 - curveExtension, y1 + d.dy) +\n                       p(x1 - curveExtension, y1 + d.dy - dt) +\n                 \"Z\";\n      }\n    }\n\n    return function(part) {\n      return function(d) {\n        if (d.source.x < d.target.x) {\n          return forwardLink(part, d);\n        } else {\n          return backwardLink(part, d);\n        }\n      }\n    }\n  };\n\n  // The standard link path using a constant width spline that needs a\n  // single path element.\n  sankey.link = function() {\n    var curvature = .5;\n\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n          x1 = d.target.x,\n          xi = d3.interpolateNumber(x0, x1),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = d.source.y + d.sy + d.dy / 2,\n          y1 = d.target.y + d.ty + d.dy / 2;\n      return \"M\" + x0 + \",\" + y0\n           + \"C\" + x2 + \",\" + y0\n           + \" \" + x3 + \",\" + y1\n           + \" \" + x1 + \",\" + y1;\n    }\n\n    link.curvature = function(_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  const computeNodeLinks = () => {\n    let source, target;\n\n    nodes.forEach((node) => {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach((link) => {\n      source = link.source = nodes[parseInt(link.source)];\n      target = link.target = nodes[parseInt(link.target)];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  const computeNodeValues = () => {\n    let fluid;\n\n    nodes.forEach((node) => {\n      if (!node.value) {\n        fluid = Math.max(\n          d3.sum(node.sourceLinks, value),\n          d3.sum(node.targetLinks, value)\n        );\n\n        node.value = fluid;\n      }\n    });\n  }\n\n  // Take the list of nodes and create a DAG of supervertices, each consisting\n  // of a strongly connected component of the graph\n  //\n  // Based off:\n  // http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm\n  const computeNodeStructure = () => {\n    let nodeStack = [],\n        index = 0;\n\n    let connect = (node) => {\n\n\n      node.lowIndex = node.index = index++;\n      node.onStack = true;\n      nodeStack.push(node);\n\n      let target;\n\n      if (node.sourceLinks) {\n        node.sourceLinks.forEach((sourceLink) => {\n          target = sourceLink.target;\n\n          if (!target.hasOwnProperty('index')) {\n            connect(target);\n            node.lowIndex = Math.min(node.lowIndex, target.lowIndex);\n          } else if (target.onStack) {\n            node.lowIndex = Math.min(node.lowIndex, target.index);\n          }\n        });\n\n        // console.log('connect');\n        // console.log(components.length);\n        // console.log(node);\n\n        if (node.lowIndex === node.index) {\n          var component = [], currentNode;\n\n          do {\n            currentNode = nodeStack.pop()\n            currentNode.onStack = false;\n            component.push(currentNode);\n          } while (currentNode != node);\n\n          components.push({\n            root: node,\n            scc: component\n          });\n        } else {\n\n        }\n      }\n    }\n\n    nodes.forEach((node) => {\n      if (!node.index) {\n        connect(node);\n      }\n    });\n\n    components.forEach(function(component, i){\n      component.index = i;\n      component.scc.forEach(function(node) {\n        node.component = i;\n      });\n    });\n  }\n\n  // Assign the breadth (x-position) for each strongly connected component,\n  // followed by assigning breadth within the component.\n  function computeNodeBreadths() {\n    layerComponents();\n    // console.log(sankey.nodes().length);\n    // console.log(components.length);\n    components.forEach(function(component, i){\n      bfs(component.root, function(node){\n        var result = node.sourceLinks\n          .filter(function(sourceLink){\n            return sourceLink.target.component == i;\n          })\n          .map(function(sourceLink){\n            return sourceLink.target;\n          });\n        return result;\n      });\n    });\n\n    var max = 0;\n\n    var componentsByBreadth = d3.nest()\n      .key(function(d) {\n        // console.log('aca');\n        // return d.scc[0].pos;\n        return d.root.pos;\n        // return d.x;\n      })\n      .sortKeys(d3.ascending)\n      .entries(components)\n      .map(function(d) { return d.values; });\n\n    var max = -1, nextMax = -1;\n    componentsByBreadth.forEach(function(c){\n      c.forEach(function(component){\n        component.x = max + 1;\n        component.scc.forEach(function(node){\n\t\t  if (node.layer) node.x=node.layer;\n          else node.x = component.x + node.x;\n          nextMax = Math.max(nextMax, node.x);\n        });\n      });\n      max = nextMax;\n    });\n\n\n    nodes\n      .filter(function(node) {\n        var outLinks = node.sourceLinks.filter(function(link){ return link.source.name != link.target.name; });\n        return (outLinks.length == 0);\n      })\n      .forEach(function(node) { node.x = max; })\n\n    scaleNodeBreadths((size[0] - nodeWidth) / Math.max(max, 1));\n\n    function flatten(a) {\n      return [].concat.apply([], a);\n    }\n\n    function layerComponents() {\n      var remainingComponents = components,\n          nextComponents,\n          visitedIndex,\n          x = 0;\n\n      while (remainingComponents.length) {\n        nextComponents = [];\n        visitedIndex = {};\n\n        remainingComponents.forEach(function(component) {\n          component.x = x;\n\n          component.scc.forEach(function(n) {\n            n.sourceLinks.forEach(function(l) {\n              if (!visitedIndex.hasOwnProperty(l.target.component) &&\n                   l.target.component != component.index) {\n                nextComponents.push(components[l.target.component]);\n                visitedIndex[l.target.component] = true;\n              }\n            })\n          });\n        });\n\n        remainingComponents = nextComponents;\n        ++x;\n      }\n    }\n\n    function bfs(node, extractTargets) {\n      var queue = [node], currentCount = 1, nextCount = 0;\n      var x = 0;\n\n      while(currentCount > 0) {\n        var currentNode = queue.shift();\n        currentCount--;\n\n        if (!currentNode.hasOwnProperty('x')) {\n          currentNode.x = x;\n          currentNode.dx = nodeWidth;\n\n          var targets = extractTargets(currentNode);\n\n          queue = queue.concat(targets);\n          nextCount += targets.length;\n        }\n\n\n        if (currentCount == 0) { // level change\n          x++;\n          currentCount = nextCount;\n          nextCount = 0;\n        }\n\n      }\n    }\n  }\n\n  function moveSourcesRight() {\n    nodes.forEach(function(node) {\n      if (!node.targetLinks.length) {\n        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function(node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function(node) {\n      node.x *= kx;\n    });\n  }\n\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = d3.nest()\n        .key(function(d) {\n          return d.x;\n        })\n        .sortKeys(d3.ascending)\n        .entries(nodes)\n        .map(function(d) { return d.values; });\n\n    initializeNodeDepth();\n    resolveCollisions();\n\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n      relaxRightToLeft(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeDepth() {\n      var ky = d3.min(nodesByBreadth, function(nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n      });\n\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(function(link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n\n      nodesByBreadth.forEach(function(nodes, breadth) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function(nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        // Alteracion del codigo\n        nodes.sort(byValue);\n        // nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n    function ascendingDepth(a, b) {\n      return b.y - a.y;\n      // return a.y - b.y;\n    }\n  }\n\n  // Alteración del código\n  // Ordena los nodos de mayor a menor en función de su valor\n  function byValue(first, second) {\n    let firstValue = first.value,\n        secondValue = second.value;\n\n    if (firstValue < secondValue) {\n      return 1;\n    } else if (firstValue > secondValue) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(function(node) {\n      // Alteracion del codigo\n      node.sourceLinks.sort(byValue);\n      // node.sourceLinks.sort(ascendingTargetDepth);\n      // Alteracion del codigo\n      node.targetLinks.sort(byValue);\n      // node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function(node) {\n      var sy = 0, ty = 0;\n      node.sourceLinks.forEach(function(link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return b.source.y - a.source.y;\n      // return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return b.target.y - a.target.y;\n      // return a.target.y - b.target.y;\n    }\n  }\n\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  return sankey;\n};\n"]}