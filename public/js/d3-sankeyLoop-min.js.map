{"version":3,"sources":["../src/js/d3-sankeyLoop.js"],"names":["d3","sankey","computeNodeLinks","nodes","forEach","node","sourceLinks","targetLinks","links","link","source","target","push","computeNodeValues","value","Math","max","sum","computeNodeBreadths","remainingNodes","nextNodes","x","cantidadCol","length","pos","dx","nodeWidth","indexOf","cycleBreaker","findAndMarkCycleBreaker","sinksRight","moveSinksRight","scaleNodeBreadths","size","depthFirstCycleSearch","cursorNode","path","n","l","weakest","pop","moveSourcesRight","min","d","kx","computeNodeDepths","iterations","initializeNodeDepth","ky","nodesByBreadth","nodePadding","i","y","dy","relaxLeftToRight","alpha","weightedSource","sy","breadth","center","relaxRightToLeft","weightedTarget","ty","slice","reverse","resolveCollisions","y0","sort","byValue","ascendingDepth","a","b","nest","key","sortKeys","ascending","entries","map","values","computeLinkDepths","ascendingSourceDepth","ascendingTargetDepth","first","second","firstValue","secondValue","_","arguments","layout","relayout","xs","xt","xi","interpolateNumber","xsc","curvature","xtc","ys","yt","xdelta","abs","xm","ym","ydelta"],"mappings":"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","file":"d3-sankeyLoop-min.js","sourcesContent":["d3.sankey = function() {\n  var sankey = {},\n      nodeWidth = 24,\n      nodePadding = 30,\n      size = [1, 1],\n      nodes = [],\n      links = [],\n      sinksRight = true;\n\n  sankey.nodeWidth = function(_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function(_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function(_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function(_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n sankey.sinksRight = function (_) {\n    if (!arguments.length) return sinksRight;\n    sinksRight = _;\n    return sankey;\n };\n\n  sankey.layout = function(iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    return sankey;\n  };\n\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // SVG path data generator, to be used as \"d\" attribute on \"path\" element selection.\n  sankey.link = function() {\n    var curvature = .5;\n\n    function link(d) {\n      var xs = d.source.x + d.source.dx,\n          xt = d.target.x,\n          xi = d3.interpolateNumber(xs, xt),\n          xsc = xi(curvature),\n          xtc = xi(1 - curvature),\n          ys = d.source.y + d.sy + d.dy / 2,\n          yt = d.target.y + d.ty + d.dy / 2;\n\n      if (!d.cycleBreaker) {\n        return \"M\" + xs + \",\" + ys\n             + \"C\" + xsc + \",\" + ys\n             + \" \" + xtc + \",\" + yt\n             + \" \" + xt + \",\" + yt;\n      } else {\n        var xdelta = (1.5 * d.dy + 0.05 * Math.abs(xs - xt));\n        xsc = xs + xdelta;\n        xtc = xt - xdelta;\n        var xm = xi(0.5);\n        var ym = d3.interpolateNumber(ys, yt)(0.5);\n        var ydelta = (2 * d.dy + 0.1 * Math.abs(xs - xt) + 0.1 * Math.abs(ys - yt)) * (ym < (size[1] / 2) ? -1 : 1);\n        return \"M\" + xs + \",\" + ys\n             + \"C\" + xsc + \",\" + ys\n             + \" \" + xsc + \",\" + (ys + ydelta)\n             + \" \" + xm + \",\" + (ym + ydelta)\n             + \"S\" + xtc + \",\" + yt\n             + \" \" + xt + \",\" + yt;\n\n      }\n    }\n\n    link.curvature = function(_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(function(node) {\n      // Links that have this node as source.\n      node.sourceLinks = [];\n      // Links that have this node as target.\n      node.targetLinks = [];\n    });\n    links.forEach(function(link) {\n      var source = link.source,\n          target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(function(node) {\n      node.value = Math.max(\n        d3.sum(node.sourceLinks, value),\n        d3.sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n        nextNodes,\n        x = 0,\n        cantidadCol = 4;\n\n    // Work from left to right.\n    // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n\n    while (remainingNodes.length && x < nodes.length) {\n      nextNodes = [];\n\n      remainingNodes.forEach(function(node) {\n        node.x = node.pos - 1;\n        node.dx = nodeWidth;\n\n        node.sourceLinks.forEach(function(link) {\n          if (nextNodes.indexOf(link.target) < 0 && !link.cycleBreaker) {\n            nextNodes.push(link.target);\n          }\n        });\n      });\n\n      if (nextNodes.length == remainingNodes.length) {\n        // There must be a cycle here. Let's search for a link that breaks it.\n        findAndMarkCycleBreaker(nextNodes);\n        // Start over.\n        // TODO: make this optional?\n        return computeNodeBreadths();\n      } else {\n        remainingNodes = nextNodes;\n        ++x;\n      }\n    }\n\n    // Optionally move pure sinks always to the right.\n    if (sinksRight) {\n      moveSinksRight(cantidadCol);\n    }\n\n    // scaleNodeBreadths((size[0] - nodeWidth) / (x - 5));\n    scaleNodeBreadths((size[0] - nodeWidth) / (cantidadCol - 1));\n  }\n\n  // Find a link that breaks a cycle in the graph (if any).\n  function findAndMarkCycleBreaker(nodes) {\n  // Go through all nodes from the given subset and traverse links searching for cycles.\n    var link;\n    for (var n=nodes.length - 1; n >= 0; n--) {\n      link = depthFirstCycleSearch(nodes[n], []);\n      if (link) {\n        return link;\n      }\n    }\n\n    // Depth-first search to find a link that is part of a cycle.\n    function depthFirstCycleSearch(cursorNode, path) {\n      var target, link;\n      for (var n = cursorNode.sourceLinks.length - 1; n >= 0; n--) {\n        link = cursorNode.sourceLinks[n];\n        if (link.cycleBreaker) {\n          // Skip already known cycle breakers.\n          continue;\n        }\n\n        // Check if target of link makes a cycle in current path.\n        target = link.target;\n        for (var l = 0; l < path.length; l++) {\n          if (path[l].source == target) {\n            // We found a cycle. Search for weakest link in cycle\n            var weakest = link;\n            for (; l < path.length; l++) {\n              if (path[l].value < weakest.value) {\n                weakest = path[l];\n              }\n            }\n            // Mark weakest link as (known) cycle breaker and abort search.\n            weakest.cycleBreaker = true;\n            return weakest;\n          }\n        }\n\n        // Recurse deeper.\n        path.push(link);\n        link = depthFirstCycleSearch(target, path);\n        path.pop();\n        // Stop further search if we found a cycle breaker.\n        if (link) {\n          return link;\n        }\n      }\n    }\n  }\n\n\n  function moveSourcesRight() {\n    nodes.forEach(function(node) {\n      if (!node.targetLinks.length) {\n        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function(node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function(node) {\n      node.x *= kx;\n    });\n  }\n\n  // Compute the depth (y-position) for each node.\n  function computeNodeDepths(iterations) {\n    // Group nodes by breath.\n    var nodesByBreadth = d3.nest()\n        .key(function(d) { return d.x; })\n        .sortKeys(d3.ascending)\n        .entries(nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeDepth();\n    resolveCollisions();\n    computeLinkDepths();\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= .99);\n      resolveCollisions();\n      computeLinkDepths();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n      computeLinkDepths();\n    }\n\n    function initializeNodeDepth() {\n      // Calculate vertical scaling factor.\n      var ky = d3.min(nodesByBreadth, function(nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n      });\n\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(function(link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function(nodes, breadth) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            // Value-weighted average of the y-position of source node centers linked to this node.\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return (link.source.y + link.sy + link.dy / 2) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            // Value-weighted average of the y-positions of target nodes linked to this node.\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return (link.target.y + link.ty + link.dy / 2) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function(nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(byValue);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n  // relative to the source/target node's y-position.\n  function computeLinkDepths() {\n    nodes.forEach(function(node) {\n      node.sourceLinks.sort(byValue);\n      node.targetLinks.sort(byValue);\n    });\n    nodes.forEach(function(node) {\n      var sy = 0, ty = 0;\n      node.sourceLinks.forEach(function(link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  // Y-position of the middle of a node.\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  // Value property accessor.\n  function value(x) {\n    return x.value;\n  }\n\n  // Alteración del código\n  // Ordena los nodos de mayor a menor en función de su valor\n  function byValue(first, second) {\n    let firstValue = first.value,\n        secondValue = second.value;\n\n    if (firstValue < secondValue) {\n      return 1;\n    } else if (firstValue > secondValue) {\n      return -1;\n    }\n\n    return 0;\n  }\n\n  return sankey;\n};\n"]}