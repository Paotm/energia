{"version":3,"sources":["d3-sankey-modify.js"],"names":["d3","sankey","nodeWidth","nodePadding","size","nodes","links","sinksRight","_","arguments","length","layout","iterations","computeNodeLinks","computeNodeValues","computeNodeBreadths","computeNodeDepths","relayout","computeLinkDepths","link","curvature","d","xs","source","x","dx","xt","target","xi","interpolateNumber","xsc","xtc","ys","y","sy","dy","yt","ty","cycleBreaker","name","xdelta","Math","abs","xm","ym","ydelta","forEach","node","sourceLinks","targetLinks","push","value","max","sum","remainingNodes","nextNodes","cantidadCol","position","indexOf","findAndMarkCycleBreaker","scaleNodeBreadths","n","depthFirstCycleSearch","cursorNode","path","l","weakest","pop","moveSourcesRight","min","moveSinksRight","kx","nodesByBreadth","nest","key","sortKeys","ascending","entries","map","values","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","ky","i","breadth","weightedSource","center","slice","reverse","weightedTarget","y0","sort","byValue","ascendingDepth","a","b","ascendingSourceDepth","ascendingTargetDepth","first","second","firstValue","positionY","secondValue"],"mappings":"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","file":"d3-sankey-modify.js","sourcesContent":["d3.sankey = function() {\n  var sankey = {},\n      nodeWidth = 24,\n      nodePadding = 30,\n      size = [1, 1],\n      nodes = [],\n      links = [],\n      sinksRight = true;\n\n  sankey.nodeWidth = function(_) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodePadding = function(_) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function(_) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function(_) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function(_) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n sankey.sinksRight = function (_) {\n    if (!arguments.length) return sinksRight;\n    sinksRight = _;\n    return sankey;\n };\n\n  sankey.layout = function(iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    return sankey;\n  };\n\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // SVG path data generator, to be used as \"d\" attribute on \"path\" element selection.\n  sankey.link = function() {\n    var curvature = .75;\n\n    function link(d) {\n      var xs  = d.source.x + d.source.dx,\n          xt  = d.target.x,\n          xi  = d3.interpolateNumber(xs, xt),\n          xsc = xi(curvature),\n          xtc = xi(1 - curvature),\n          ys  = d.source.y + d.sy + d.dy / 2,\n          yt  = d.target.y + d.ty + d.dy / 2;\n\n      if (!d.cycleBreaker) {\n        if (d.target.name === 'Pérdidas') { // LINK PERDIDA\n\n          return `M ${ xs } ${ ys }\n                  L ${ xs + 5 } ${ ys }\n                  C ${ xs + 5 + 5 } ${ ys } ${ xs + 5 + 5 } ${ ys } ${ xs + 5 + 5 } ${ ys + 15 }`;\n        } else { // NORMAL LINK\n          return `M${ xs },${ ys } C${ xsc },${ ys } ${ xtc },${ yt } ${ xt },${ yt }`;\n        }\n      } else {  // CYCLE LINK\n        var xdelta = (1.5 * d.dy + 0.05 * Math.abs(xs - xt));\n        xsc = xs + xdelta;\n        xtc = xt - xdelta;\n        var xm = xi(0.5);\n        var ym = d3.interpolateNumber(ys, yt)(0.5);\n        var ydelta = (2 * d.dy + 0.1 * Math.abs(xs - xt) + 0.1 * Math.abs(ys - yt)) * (ym < (size[1] / 2) ? -1 : 1);\n        return \"M\" + xs + \",\" + ys\n             + \"C\" + xsc + \",\" + ys\n             + \" \" + xsc + \",\" + (ys + ydelta)\n             + \" \" + xm + \",\" + (ym + ydelta)\n             + \"S\" + xtc + \",\" + yt\n             + \" \" + xt + \",\" + yt;\n      }\n    }\n\n    link.curvature = function(_) {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(function(node) {\n      // Links that have this node as source.\n      node.sourceLinks = [];\n      // Links that have this node as target.\n      node.targetLinks = [];\n    });\n    links.forEach(function(link) {\n      var source = link.source,\n          target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(function(node) {\n      node.value = Math.max(\n        d3.sum(node.sourceLinks, value),\n        d3.sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    var remainingNodes = nodes,\n        nextNodes,\n        x = 0,\n        cantidadCol = 6;\n\n    // Work from left to right.\n    // Keep updating the breath (x-position) of nodes that are target of recently updated nodes.\n\n    while (remainingNodes.length && x < nodes.length) {\n      nextNodes = [];\n\n      remainingNodes.forEach(function(node) {\n        node.x = node.position - 1;\n        node.dx = nodeWidth;\n\n        node.sourceLinks.forEach(function(link) {\n          if (nextNodes.indexOf(link.target) < 0 && !link.cycleBreaker) {\n            nextNodes.push(link.target);\n          }\n        });\n      });\n\n      if (nextNodes.length == remainingNodes.length) {\n        // There must be a cycle here. Let's search for a link that breaks it.\n        findAndMarkCycleBreaker(nextNodes);\n        // Start over.\n        // TODO: make this optional?\n        return computeNodeBreadths();\n      } else {\n        remainingNodes = nextNodes;\n        ++x;\n      }\n    }\n    // Optionally move pure sinks always to the right.\n    // if (sinksRight) {\n    //   moveSinksRight(cantidadCol);\n    // }\n    // scaleNodeBreadths((size[0] - nodeWidth) / (x - 5));\n    scaleNodeBreadths((size[0] - nodeWidth) / (cantidadCol - 1));\n  }\n\n  // Find a link that breaks a cycle in the graph (if any).\n  function findAndMarkCycleBreaker(nodes) {\n  // Go through all nodes from the given subset and traverse links searching for cycles.\n    var link;\n    for (var n=nodes.length - 1; n >= 0; n--) {\n      link = depthFirstCycleSearch(nodes[n], []);\n      if (link) {\n        return link;\n      }\n    }\n\n    // Depth-first search to find a link that is part of a cycle.\n    function depthFirstCycleSearch(cursorNode, path) {\n      var target, link;\n      for (var n = cursorNode.sourceLinks.length - 1; n >= 0; n--) {\n        link = cursorNode.sourceLinks[n];\n        if (link.cycleBreaker) {\n          // Skip already known cycle breakers.\n          continue;\n        }\n\n        // Check if target of link makes a cycle in current path.\n        target = link.target;\n        for (var l = 0; l < path.length; l++) {\n          if (path[l].source == target) {\n            // We found a cycle. Search for weakest link in cycle\n            var weakest = link;\n            for (; l < path.length; l++) {\n              if (path[l].value < weakest.value) {\n                weakest = path[l];\n              }\n            }\n            // Mark weakest link as (known) cycle breaker and abort search.\n            weakest.cycleBreaker = true;\n            return weakest;\n          }\n        }\n\n        // Recurse deeper.\n        path.push(link);\n        link = depthFirstCycleSearch(target, path);\n        path.pop();\n        // Stop further search if we found a cycle breaker.\n        if (link) {\n          return link;\n        }\n      }\n    }\n  }\n\n\n  function moveSourcesRight() {\n    nodes.forEach(function(node) {\n      if (!node.targetLinks.length) {\n        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function(node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function(node) {\n      node.x *= kx;\n    });\n  }\n\n  // Compute the depth (y-position) for each node.\n  function computeNodeDepths(iterations) {\n    // Group nodes by breath.\n    var nodesByBreadth = d3.nest()\n        .key(function(d) { return d.x; })\n        .sortKeys(d3.ascending)\n        .entries(nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeDepth();\n    resolveCollisions();\n    computeLinkDepths();\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= .99);\n      resolveCollisions();\n      computeLinkDepths();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n      computeLinkDepths();\n    }\n\n    function initializeNodeDepth() {\n      // Calculate vertical scaling factor.\n      var ky = d3.min(nodesByBreadth, function(nodes) {\n        return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);\n      });\n\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(function(link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function(nodes, breadth) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            // Value-weighted average of the y-position of source node centers linked to this node.\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return (link.source.y + link.sy + link.dy / 2) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            // Value-weighted average of the y-positions of target nodes linked to this node.\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return (link.target.y + link.ty + link.dy / 2) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function(nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(byValue);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  // Compute y-offset of the source endpoint (sy) and target endpoints (ty) of links,\n  // relative to the source/target node's y-position.\n  function computeLinkDepths() {\n    nodes.forEach(function(node) {\n      node.sourceLinks.sort(byValue);\n      node.targetLinks.sort(byValue);\n    });\n    nodes.forEach(function(node) {\n      var sy = 0, ty = 0;\n      node.sourceLinks.forEach(function(link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  // Y-position of the middle of a node.\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  // Value property accessor.\n  function value(x) {\n    return x.value;\n  }\n\n  // Alteración del código\n  // Ordena los nodos de mayor a menor en función de su valor\n  function byValue(first, second) {\n    let firstValue = first.positionY,\n        secondValue = second.positionY;\n\n    if (firstValue < secondValue) {\n      return -1;\n    } else if (firstValue > secondValue) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  return sankey;\n};\n"]}