{"version":3,"sources":["../src/js/d3-sankeyBi.js"],"names":["d3","biHiSankey","center","node","y","height","value","link","initializeNodeArrayProperties","sourceLinks","rightLinks","targetLinks","leftLinks","connectedNodes","children","ancestors","initializeNodeMap","nodes","forEach","nodeMap","id","computeLeafNodes","leafNodes","filter","length","computeParentNodes","parentNodes","addAncestorsToChildren","child","concat","this","computeNodeHierarchy","parent","rootNodes","push","rNode","computeNodeLinks","sourceNode","targetNode","links","source","target","visible","linkCollection","state","computeAncestorLinks","leafNode","sourceLink","ancestorTargets","indexOf","tAncestor","ancestorTarget","ancestorLink","targetLink","ancestorSources","sAncestor","ancestorSource","parentNode","mergeLinks","nest","key","entries","map","object","values","linkGroup","reduce","previousLink","currentLink","min","nodeHeight","sideLinks","spacing","Math","max","linkSpacing","sum","yScaleFactor","computeNodeValues","netFlow","linkSpaceCount","computeConnectedNodes","sourceAndTargetNodesWithSameX","nodeArray","x","compressInXDirection","connectedNodesXPositions","sortKeys","ascending","xnodes","connectedNode","scaleNodeXPositions","minX","maxX","xScaleFactor","size","nodeWidth","computeNodeXPositions","remainingNodes","nextNodes","addToNextNodes","setValues","width","computeLeftAndRightLinks","direction","adjustTop","adjustment","computeNodeYPositions","iterations","calculateYScaleFactor","linkSpacesCount","nodeValueSum","discretionaryY","nodesByXPosition","nodeSpacing","linkLength","abs","initializeNodeYPosition","i","heightAllowance","calculateLinkThickness","thickness","relaxLeftToRight","alpha","weightedSource","relaxRightToLeft","weightedTarget","slice","reverse","resolveCollisions","ascendingYPosition","a","b","dy","y0","n","sort","minY","computeLinkYPositions","ascendingLeftNodeYPosition","aLeftNode","bLeftNode","ascendingRightNodeYPosition","aRightNode","bRightNode","rightY","leftY","sourceY","targetY","arrowheadScaleFactor","defaultLinkCurvature","_","arguments","collapsedNodes","connected","nodeA","nodeB","expandedNodes","layout","leftToRightLink","arrowHeadLength","straightSectionLength","x0","x1","x4","xi","interpolateNumber","x2","curvature","x3","y1","rightToLeftLink","d","relayout","visibleLinks","initializeNodes","callback"],"mappings":"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","file":"d3-sankeyBi-min.js","sourcesContent":["d3.biHiSankey = function () {\n\n  var biHiSankey = {},\n    nodeWidth = 24,\n    nodeSpacing = 8,\n    linkSpacing = 5,\n    arrowheadScaleFactor = 0, // Specifies the proportion of a link's stroke width to be allowed for the marker at the end of the link.\n    size = [1, 1], // default to one pixel by one pixel\n    nodes = [],\n    nodeMap = {},\n    parentNodes = [],\n    leafNodes = [],\n    links = [],\n    xScaleFactor = 1,\n    yScaleFactor = 1,\n    defaultLinkCurvature = 0.5;\n\n  function center(node) {\n    return node.y + node.height / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  function initializeNodeArrayProperties(node) {\n    node.sourceLinks = [];\n    node.rightLinks = [];\n    node.targetLinks = [];\n    node.leftLinks = [];\n    node.connectedNodes = [];\n    node.children = [];\n    node.ancestors = [];\n  }\n  // generates the nodeMap {\"1\": <node1>, \"2\": <node2>}\n  // and initializes the array properties of each node\n  function initializeNodeMap() {\n    nodes.forEach(function (node) {\n      nodeMap[node.id] = node;\n      initializeNodeArrayProperties(node);\n    });\n  }\n\n  function computeLeafNodes() {\n    leafNodes = nodes.filter(function (node) {\n      return !node.children.length;\n    });\n  }\n\n  function computeParentNodes() {\n    parentNodes = nodes.filter(function (node) {\n      return node.children.length;\n    });\n  }\n\n  function addAncestorsToChildren(node) {\n    node.children.forEach(function (child) {\n      child.ancestors = child.ancestors.concat(this.ancestors.concat([this]));\n      addAncestorsToChildren(child);\n    }, node);\n  }\n\n  // generate hierarchical connections between parent and child nodes\n  function computeNodeHierarchy() {\n    var parent,\n        rootNodes = [];\n\n    nodes.forEach(function (node) {\n      parent = nodeMap[node.parent];\n      if (parent) {\n        node.parent = parent;\n        parent.children.push(node);\n      } else {\n        node.parent = null;\n        rootNodes.push(node);\n      }\n    });\n\n    computeLeafNodes();\n    computeParentNodes();\n\n    rootNodes.forEach(function (rNode) {\n      addAncestorsToChildren(rNode);\n    });\n  }\n\n  // Populate the sourceLinks and targetLinks for each node.\n  function computeNodeLinks() {\n    var sourceNode, targetNode;\n    links.forEach(function (link) {\n      sourceNode = nodeMap[link.source] || link.source;\n      targetNode = nodeMap[link.target] || link.target;\n      link.id = link.source + '-' + link.target;\n      link.source = sourceNode;\n      link.target = targetNode;\n      sourceNode.sourceLinks.push(link);\n      targetNode.targetLinks.push(link);\n    });\n  }\n\n  function visible(linkCollection) {\n    return linkCollection.filter(function (link) {\n      return link.source.state === \"collapsed\" && link.target.state === \"collapsed\";\n    });\n  }\n\n  // When child nodes are collapsed into their parents (or higher ancestors)\n  // the links between the child nodes should be represented by links\n  // between the containing ancestors. This function adds those extra links.\n  function computeAncestorLinks() {\n    // Leaf nodes are never parents of other nodes\n    // Duplicate source and target links between a leaf node and another leaf node\n    // and add to the leaf nodes' parents\n    leafNodes.forEach(function (leafNode) {\n      leafNode.sourceLinks.forEach(function (sourceLink) {\n        var ancestorTargets,\n        target = sourceLink.target;\n        if (leafNodes.indexOf(target) >= 0) {\n          ancestorTargets = target.ancestors.filter(function (tAncestor) {\n            return leafNode.ancestors.indexOf(tAncestor) < 0;\n          });\n          ancestorTargets.forEach(function (ancestorTarget) {\n            var ancestorLink = { source: leafNode,\n                                target: ancestorTarget,\n                                value: sourceLink.value,\n                                id: leafNode.id + \"-\" + ancestorTarget.id };\n\n            leafNode.sourceLinks.push(ancestorLink);\n            ancestorTarget.targetLinks.push(ancestorLink);\n            links.push(ancestorLink);\n          });\n        }\n      });\n\n      leafNode.targetLinks.forEach(function (targetLink) {\n        var ancestorSources, source = targetLink.source;\n        if (leafNodes.indexOf(source) >= 0) {\n          ancestorSources = source.ancestors.filter(function (sAncestor) {\n            return leafNode.ancestors.indexOf(sAncestor) < 0;\n          });\n          ancestorSources.forEach(function (ancestorSource) {\n            var ancestorLink = { source: ancestorSource,\n                                target: leafNode,\n                                value: targetLink.value,\n                                id: ancestorSource.id + \"-\" + leafNode.id };\n            ancestorSource.sourceLinks.push(ancestorLink);\n            leafNode.targetLinks.push(ancestorLink);\n            links.push(ancestorLink);\n          });\n        }\n      });\n    });\n\n    // Add links between parents (for when both parents are in collapsed state)\n    parentNodes.forEach(function (parentNode) {\n      parentNode.sourceLinks.forEach(function (sourceLink) {\n        var ancestorTargets, target = sourceLink.target;\n        if (leafNodes.indexOf(target) >= 0) {\n          ancestorTargets = target.ancestors.filter(function (tAncestor) {\n            return parentNode.ancestors.indexOf(tAncestor) < 0;\n          });\n          ancestorTargets.forEach(function (ancestorTarget) {\n            var ancestorLink = { source: parentNode,\n                                target: ancestorTarget,\n                                value: sourceLink.value,\n                                id: parentNode.id + \"-\" + ancestorTarget.id };\n\n            parentNode.sourceLinks.push(ancestorLink);\n            ancestorTarget.targetLinks.push(ancestorLink);\n            links.push(ancestorLink);\n          });\n        }\n      });\n    });\n  }\n\n  // To reduce clutter in the diagram merge links that are from the\n  // same source to the same target by creating a new link\n  // with a value equal to the sum of the values of the merged links\n  function mergeLinks() {\n    var linkGroups = d3.nest()\n      .key(function (link) { return link.source.id + \"->\" + link.target.id; })\n      .entries(links)\n      .map(function (object) { return object.values; });\n\n    links = linkGroups.map(function (linkGroup) {\n      return linkGroup.reduce(function (previousLink, currentLink) {\n        return {\n          \"source\": previousLink.source,\n          \"target\": previousLink.target,\n          \"id\": d3.min([previousLink.id, currentLink.id]),\n          \"value\": previousLink.value + currentLink.value\n        };\n      });\n    });\n  }\n\n  function nodeHeight(sideLinks) {\n    var spacing = Math.max(sideLinks.length - 1, 0) * linkSpacing,\n        scaledValueSum = d3.sum(sideLinks, value) * yScaleFactor;\n    return scaledValueSum + spacing;\n  }\n\n  // Compute the value of each node by summing the associated links.\n  // Compute the number of spaces between the links\n  // Compute the number of source links for later decrementing\n  function computeNodeValues() {\n    nodes.forEach(function (node) {\n      node.value = Math.max(\n        d3.sum(node.leftLinks, value),\n        d3.sum(node.rightLinks, value)\n      );\n      node.netFlow = d3.sum(visible(node.targetLinks), value) - d3.sum(visible(node.sourceLinks), value);\n      node.height = Math.max(nodeHeight(visible(node.leftLinks)), nodeHeight(visible(node.rightLinks)));\n      node.linkSpaceCount = Math.max(Math.max(node.leftLinks.length, node.rightLinks.length) - 1, 0);\n    });\n  }\n\n  function computeConnectedNodes() {\n    var sourceNode, targetNode;\n    links.forEach(function (link) {\n      sourceNode = link.source;\n      targetNode = link.target;\n      if (sourceNode.connectedNodes.indexOf(targetNode) < 0) {\n        sourceNode.connectedNodes.push(targetNode);\n      }\n      if (targetNode.connectedNodes.indexOf(sourceNode) < 0) {\n        targetNode.connectedNodes.push(sourceNode);\n      }\n    });\n  }\n\n  function sourceAndTargetNodesWithSameX() {\n    var nodeArray = [];\n    links.filter(function (link) {\n      return link.target.x === link.source.x;\n    }).forEach(function (link) {\n      if (nodeArray.indexOf(link.target) < 0) {\n        nodeArray.push(link.target);\n      }\n    });\n    return nodeArray;\n  }\n\n  function compressInXDirection() {\n    var connectedNodesXPositions,\n        nodesByXPosition = d3.nest()\n          .key(function (node) { return node.x; })\n          .sortKeys(d3.ascending)\n          .entries(nodes)\n          .map(function (object) { return object.values; });\n\n    nodesByXPosition.forEach(function (xnodes) {\n      xnodes.forEach(function (node) {\n        connectedNodesXPositions = node.connectedNodes.map(function (connectedNode) {\n          return connectedNode.x;\n        });\n        // keep decrementing the x value of the node\n        // unless it would have the same x value as one of its source or target nodes\n        // or node.x is already 0\n        while (node.x > 0 && connectedNodesXPositions.indexOf(node.x - 1) < 0) {\n          node.x -= 1;\n        }\n      });\n    });\n  }\n\n  function scaleNodeXPositions() {\n    var minX = d3.min(nodes, function (node) { return node.x; }),\n        maxX = d3.max(nodes, function (node) { return node.x; }) - minX;\n    xScaleFactor = (size[0] - nodeWidth) / maxX;\n\n    nodes.forEach(function (node) {\n      node.x *= xScaleFactor;\n    });\n  }\n\n  function computeNodeXPositions() {\n    var remainingNodes = nodes,\n        nextNodes,\n        x = 0,\n        addToNextNodes = function (link) {\n          if (nextNodes.indexOf(link.target) < 0 && link.target.x === this.x) {\n            nextNodes.push(link.target);\n          }\n        },\n        setValues = function (node) {\n          node.x = x;\n          node.width = nodeWidth;\n          node.sourceLinks.forEach(addToNextNodes, node);\n        };\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(setValues);\n      if (nextNodes.length) {\n        remainingNodes = nextNodes;\n      } else {\n        remainingNodes = sourceAndTargetNodesWithSameX();\n      }\n      x += 1;\n    }\n\n    compressInXDirection();\n    scaleNodeXPositions();\n  }\n\n  function computeLeftAndRightLinks() {\n    var source, target;\n    nodes.forEach(function (node) {\n      node.rightLinks = [];\n      node.leftLinks = [];\n    });\n    links.forEach(function (link) {\n      source = link.source;\n      target = link.target;\n      if (source.x < target.x) {\n        source.rightLinks.push(link);\n        target.leftLinks.push(link);\n        link.direction = 1;\n      } else {\n        source.leftLinks.push(link);\n        target.rightLinks.push(link);\n        link.direction = -1;\n      }\n    });\n  }\n\n  function adjustTop(adjustment) {\n    nodes.forEach(function (node) {\n      node.y -= adjustment;\n    });\n  }\n\n  function computeNodeYPositions(iterations) {\n    var minY,\n        alpha,\n        nodesByXPosition = d3.nest()\n          .key(function (node) { return node.x; })\n          .sortKeys(d3.ascending)\n          .entries(nodes)\n          .map(function (object) { return object.values; });\n\n    function calculateYScaleFactor() {\n      var linkSpacesCount, nodeValueSum, discretionaryY;\n      yScaleFactor = d3.min(nodesByXPosition, function (nodes) {\n        linkSpacesCount = d3.sum(nodes, function (node) {\n          return node.linkSpaceCount;\n        });\n        nodeValueSum = d3.sum(nodes, function (node) {\n          return node.value;\n        });\n        discretionaryY = (size[1]\n                        - (nodes.length - 1) * nodeSpacing\n                        - linkSpacesCount * linkSpacing);\n\n        return  discretionaryY / nodeValueSum;\n      });\n\n      // Fat links are those with lengths less than about 4 times their heights\n      // Fat links don't bend well\n      // Test that yScaleFactor is not so big that it causes \"fat\" links; adjust yScaleFactor accordingly\n      links.forEach(function (link) {\n        var linkLength = Math.abs(link.source.x - link.target.x),\n            linkHeight = link.value * yScaleFactor;\n        if (linkLength / linkHeight < 4) {\n          yScaleFactor = 0.25 * linkLength / link.value;\n        }\n      });\n    }\n\n    function initializeNodeYPosition() {\n      nodesByXPosition.forEach(function (nodes) {\n        nodes.forEach(function (node, i) {\n          node.y = i;\n          node.heightAllowance = node.value * yScaleFactor + linkSpacing * node.linkSpaceCount;\n        });\n      });\n    }\n\n    function calculateLinkThickness() {\n      links.forEach(function (link) {\n        link.thickness = link.value * yScaleFactor;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n\n      nodesByXPosition.forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.rightLinks.length) {\n            var y = d3.sum(node.rightLinks, weightedSource) / d3.sum(node.rightLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n    }\n\n    function relaxRightToLeft(alpha) {\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n\n      nodesByXPosition.slice().reverse().forEach(function (nodes) {\n        nodes.forEach(function (node) {\n          if (node.leftLinks.length) {\n            var y = d3.sum(node.leftLinks, weightedTarget) / d3.sum(node.leftLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      function ascendingYPosition(a, b) {\n        return a.y - b.y;\n      }\n\n      nodesByXPosition.forEach(function (nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i;\n\n        nodes.sort(ascendingYPosition);\n\n        // Push any overlapping nodes down.\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) {\n            node.y += dy;\n          }\n          y0 = node.y + node.heightAllowance + nodeSpacing;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodeSpacing - size[1];\n        if (dy > 0) {\n          node.y -= dy;\n          y0 = node.y;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.heightAllowance + nodeSpacing - y0;\n            if (dy > 0) {\n              node.y -= dy;\n            }\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    calculateYScaleFactor();\n    initializeNodeYPosition();\n    calculateLinkThickness();\n    resolveCollisions();\n\n    for (alpha = 1; iterations > 0; --iterations) {\n      alpha *= 0.99;\n      relaxRightToLeft(alpha);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    minY = d3.min(nodes, function (node) { return node.y; });\n    adjustTop(minY);\n  }\n\n  function computeLinkYPositions() {\n\n    function ascendingLeftNodeYPosition(a, b) {\n      var aLeftNode = (a.direction > 0) ? a.source : a.target,\n          bLeftNode = (b.direction > 0) ? b.source : b.target;\n      return aLeftNode.y - bLeftNode.y;\n    }\n\n    function ascendingRightNodeYPosition(a, b) {\n      var aRightNode = (a.direction > 0) ? a.target : a.source,\n          bRightNode = (b.direction > 0) ? b.target : b.source;\n      return aRightNode.y - bRightNode.y;\n    }\n\n    nodes.forEach(function (node) {\n      node.rightLinks.sort(ascendingRightNodeYPosition);\n      node.leftLinks.sort(ascendingLeftNodeYPosition);\n    });\n\n    nodes.forEach(function (node) {\n      var rightY = 0, leftY = 0;\n\n      node.rightLinks.forEach(function (link) {\n        if (link.direction > 0) {\n          link.sourceY = rightY;\n          if (link.target.state === \"collapsed\") {\n            rightY += link.thickness + linkSpacing;\n          }\n        }\n        else {\n          link.targetY = rightY;\n          if (link.source.state === \"collapsed\") {\n            rightY += link.thickness + linkSpacing;\n          }\n        }\n      });\n\n      node.leftLinks.forEach(function (link) {\n        if (link.direction < 0) {\n          link.sourceY = leftY;\n          if (link.target.state === \"collapsed\") {\n            leftY += link.thickness + linkSpacing;\n          }\n        }\n        else {\n          link.targetY = leftY;\n          if (link.source.state === \"collapsed\") {\n            leftY += link.thickness + linkSpacing;\n          }\n        }\n      });\n\n    });\n  }\n\n\n  biHiSankey.arrowheadScaleFactor = function (_) {\n    if (!arguments.length) { return arrowheadScaleFactor; }\n    arrowheadScaleFactor = +_;\n    return biHiSankey;\n  };\n\n  biHiSankey.collapsedNodes = function () {\n    return nodes.filter(function (node) { return node.state === \"collapsed\"; });\n  };\n\n  biHiSankey.connected = function (nodeA, nodeB) {\n    return nodeA.connectedNodes.indexOf(nodeB) >= 0;\n  };\n\n  biHiSankey.expandedNodes = function () {\n    return nodes.filter(function (node) { return node.state === \"expanded\"; });\n  };\n\n  biHiSankey.layout = function (iterations) {\n    computeNodeXPositions();\n    computeLeftAndRightLinks();\n    computeNodeValues();\n    computeNodeYPositions(iterations);\n    computeNodeValues();\n    computeLinkYPositions();\n    return biHiSankey;\n  };\n\n  biHiSankey.link = function () {\n    var curvature = defaultLinkCurvature;\n\n    function leftToRightLink(link) {\n      var arrowHeadLength = link.thickness * arrowheadScaleFactor,\n          straightSectionLength = (3 * link.thickness / 4) - arrowHeadLength,\n          x0 = link.source.x + link.source.width,\n          x1 = x0 + arrowHeadLength / 2,\n          x4 = link.target.x - straightSectionLength - arrowHeadLength,\n          xi = d3.interpolateNumber(x0, x4),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = link.source.y + link.sourceY + link.thickness / 2,\n          y1 = link.target.y + link.targetY + link.thickness / 2;\n      return \"M\" + x0 + \",\" + y0\n           + \"L\" + x1 + \",\" + y0\n           + \"C\" + x2 + \",\" + y0\n           + \" \" + x3 + \",\" + y1\n           + \" \" + x4 + \",\" + y1\n           + \"L\" + (x4 + straightSectionLength) + \",\" + y1;\n    }\n\n    function rightToLeftLink(link) {\n      var arrowHeadLength = link.thickness * arrowheadScaleFactor,\n          straightSectionLength = link.thickness / 4,\n          x0 = link.source.x,\n          x1 = x0 - arrowHeadLength / 2,\n          x4 = link.target.x + link.target.width + straightSectionLength + arrowHeadLength,\n          xi = d3.interpolateNumber(x0, x4),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = link.source.y + link.sourceY + link.thickness / 2,\n          y1 = link.target.y + link.targetY + link.thickness / 2;\n      return \"M\" + x0 + \",\" + y0\n           + \"L\" + x1 + \",\" + y0\n           + \"C\" + x2 + \",\" + y0\n           + \" \" + x3 + \",\" + y1\n           + \" \" + x4 + \",\" + y1\n           + \"L\" + (x4 - straightSectionLength) + \",\" + y1;\n    }\n\n    function link(d) {\n      if (d.source.x < d.target.x) {\n        return leftToRightLink(d);\n      }\n      return rightToLeftLink(d);\n    }\n\n    link.curvature = function (_) {\n      if (!arguments.length) { return curvature; }\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  biHiSankey.links = function (_) {\n    if (!arguments.length) { return links; }\n    links = _.filter(function (link) {\n      return link.source !== link.target; // filter out links that go nowhere\n    });\n    return biHiSankey;\n  };\n\n  biHiSankey.linkSpacing = function (_) {\n    if (!arguments.length) { return linkSpacing; }\n    linkSpacing = +_;\n    return biHiSankey;\n  };\n\n  biHiSankey.nodes = function (_) {\n    if (!arguments.length) { return nodes; }\n    nodes = _;\n    return biHiSankey;\n  };\n\n  biHiSankey.nodeWidth = function (_) {\n    if (!arguments.length) { return nodeWidth; }\n    nodeWidth = +_;\n    return biHiSankey;\n  };\n\n  biHiSankey.nodeSpacing = function (_) {\n    if (!arguments.length) { return nodeSpacing; }\n    nodeSpacing = +_;\n    return biHiSankey;\n  };\n\n  biHiSankey.relayout = function () {\n    computeLeftAndRightLinks();\n    computeNodeValues();\n    computeLinkYPositions();\n    return biHiSankey;\n  };\n\n  biHiSankey.size = function (_) {\n    if (!arguments.length) { return size; }\n    size = _;\n    return biHiSankey;\n  };\n\n  biHiSankey.visibleLinks = function () {\n    return visible(links);\n  };\n\n  biHiSankey.initializeNodes = function (callback) {\n    initializeNodeMap();\n    computeNodeHierarchy();\n    computeNodeLinks();\n    computeAncestorLinks();\n    mergeLinks();\n    computeConnectedNodes();\n    nodes.forEach(callback);\n    return biHiSankey;\n  };\n\n  return biHiSankey;\n};\n"]}