{"version":3,"sources":["../src/js/d3-sankey.js"],"names":["d3","sankey","computeNodeLinks","nodes","forEach","node","sourceLinks","targetLinks","links","link","source","target","push","computeNodeValues","value","Math","max","sum","computeNodeBreadths","remainingNodes","nextNodes","x","length","xPos","dx","nodeWidth","scaleNodeBreadths","size","moveSourcesRight","min","d","moveSinksRight","kx","computeNodeDepths","iterations","initializeNodeDepth","ky","nodesByBreadth","nodeSpacing","i","y","dy","relaxLeftToRight","alpha","weightedSource","center","breadth","relaxRightToLeft","weightedTarget","slice","reverse","resolveCollisions","y0","n","sort","ascendingDepth","a","b","nest","key","sortKeys","ascending","entries","map","values","computeLinkDepths","ascendingSourceDepth","ascendingTargetDepth","sy","ty","defaultLinkCurvature","_","arguments","layout","relayout","x0","x1","xi","interpolateNumber","x2","curvature","x3","y1"],"mappings":"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","file":"d3-sankey-min.js","sourcesContent":["d3.sankey = function() {\n\n  let sankey = {}\n    , nodeWidth = 24\n    , nodeSpacing = 8\n    , size = [1, 1]\n    , nodes = []\n    , links = []\n    , defaultLinkCurvature = 0.5;\n\n  sankey.nodeWidth = function(_) {\n    if (!arguments.length) { return nodeWidth; }\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  sankey.nodeSpacing = function(_) {\n    if (!arguments.length) { return nodeSpacing; }\n    nodeSpacing = +_;\n    return sankey;\n  };\n\n  sankey.nodes = function(_) {\n    if (!arguments.length) { return nodes; }\n    nodes = _;\n    return sankey;\n  };\n\n  sankey.links = function(_) {\n    if (!arguments.length) { return links; }\n    links = _;\n    return sankey;\n  };\n\n  sankey.size = function(_) {\n    if (!arguments.length) { return size; }\n    size = _;\n    return sankey;\n  };\n\n  sankey.layout = function(iterations) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  sankey.link = function() {\n    var curvature = .5;\n\n    function link(d) {\n      var x0 = d.source.x + d.source.dx,\n          x1 = d.target.x,\n          xi = d3.interpolateNumber(x0, x1),\n          x2 = xi(curvature),\n          x3 = xi(1 - curvature),\n          y0 = d.source.y + d.sy + d.dy / 2,\n          y1 = d.target.y + d.ty + d.dy / 2;\n      return \"M\" + x0 + \",\" + y0\n           + \"C\" + x2 + \",\" + y0\n           + \" \" + x3 + \",\" + y1\n           + \" \" + x1 + \",\" + y1;\n    }\n\n    link.curvature = function(_) {\n      if (!arguments.length) { return curvature; }\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(function(node) {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(function(link) {\n      var source = link.source,\n          target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(function(node) {\n      node.value = Math.max(\n        d3.sum(node.sourceLinks, value),\n        d3.sum(node.targetLinks, value)\n      );\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  // function computeNodeBreadths() {\n  //   var remainingNodes = nodes,\n  //       nextNodes,\n  //       x = 0;\n  //\n  //   while (remainingNodes.length) {\n  //     nextNodes = [];\n  //     remainingNodes.forEach(function(node) {\n  //       node.x = x;\n  //       node.dx = nodeWidth;\n  //       node.sourceLinks.forEach(function(link) {\n  //         if (nextNodes.indexOf(link.target) < 0) {\n  //           nextNodes.push(link.target);\n  //         }\n  //       });\n  //     });\n  //     remainingNodes = nextNodes;\n  //     ++x;\n  //   }\n  //\n  //   //\n  //   moveSinksRight(x);\n  //   scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  // }                                          // CÃ³digo alterado\n  function computeNodeBreadths() {\n      var remainingNodes = nodes,\n          nextNodes,\n          x = 0;\n\n      while (remainingNodes.length) {\n        nextNodes = [];\n        remainingNodes.forEach(function(node) {\n\n          if (node.xPos)\n              node.x = node.xPos;\n          else\n              node.x = x;\n\n          node.dx = nodeWidth;\n          node.sourceLinks.forEach(function(link) {\n            nextNodes.push(link.target);\n          });\n        });\n        remainingNodes = nextNodes;\n        ++x;\n      }\n\n      // moveSinksRight(x);\n      scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  }\n\n  function moveSourcesRight() {\n    nodes.forEach(function(node) {\n      if (!node.targetLinks.length) {\n        node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;\n      }\n    });\n  }\n\n  function moveSinksRight(x) {\n    nodes.forEach(function(node) {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx) {\n    nodes.forEach(function(node) {\n      node.x *= kx;\n    });\n  }\n\n  function computeNodeDepths(iterations) {\n    var nodesByBreadth = d3.nest()\n        .key(function(d) { return d.x; })\n        .sortKeys(d3.ascending)\n        .entries(nodes)\n        .map(function(d) { return d.values; });\n\n    //\n    initializeNodeDepth();\n    resolveCollisions();\n    for (var alpha = 1; iterations > 0; --iterations) {\n      relaxRightToLeft(alpha *= .99);\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function initializeNodeDepth() {\n      var ky = d3.min(nodesByBreadth, function(nodes) {\n        return (size[1] - (nodes.length - 1) * nodeSpacing) / d3.sum(nodes, value);\n      });\n\n      nodesByBreadth.forEach(function(nodes) {\n        nodes.forEach(function(node, i) {\n          node.y = i;\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(function(link) {\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha) {\n      nodesByBreadth.forEach(function(nodes, breadth) {\n        nodes.forEach(function(node) {\n          if (node.targetLinks.length) {\n            var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedSource(link) {\n        return center(link.source) * link.value;\n      }\n    }\n\n    function relaxRightToLeft(alpha) {\n      nodesByBreadth.slice().reverse().forEach(function(nodes) {\n        nodes.forEach(function(node) {\n          if (node.sourceLinks.length) {\n            var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n\n      function weightedTarget(link) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach(function(nodes) {\n        var node,\n            dy,\n            y0 = 0,\n            n = nodes.length,\n            i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodeSpacing;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodeSpacing - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodeSpacing - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    function ascendingDepth(a, b) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(function(node) {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(function(node) {\n      var sy = 0, ty = 0;\n      node.sourceLinks.forEach(function(link) {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach(function(link) {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a, b) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a, b) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  function center(node) {\n    return node.y + node.dy / 2;\n  }\n\n  function value(link) {\n    return link.value;\n  }\n\n  return sankey;\n};\n"]}